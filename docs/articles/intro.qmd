---
jupyter: python3
aliases:
  - ../index.html
html-table-processing: none
---

# üê¢Turtle Island
**Turtle Island** is a lightweight utility library that provides helper functions to reduce boilerplate when writing Polars expressions. It aims to simplify common expression patterns and improve developer productivity when working with the Polars API.

::: {.callout-warning}
# Disclaimer
**Turtle Island** is in early development. The API is still evolving and may change without notice. Use with caution in production environments.
::: 

## üöÄ Installation
**Turtle Island** is not yet published on PyPI. The recommended way to install it is using `uv add`:

```bash
uv add git+https://github.com/jrycw/turtle-island.git
```

## üì¶ Recommended Import
To keep your code clean and idiomatic, it's recommended to import **Turtle Island** as a top-level module:

```python
import turtle_island as ti
```

## ‚öôÔ∏è Core Spirit
The core spirit of **Turtle Island** is to embrace **expressions over columns**.

When wrangling data, it's common to create temporary helper columns as part of the transformation process. However, many of these columns are just intermediate artifacts ‚Äî not part of the final output we actually want. They exist solely to assist with intermediate steps.

Polars offers a powerful distinction between contexts and expressions, allowing us to focus on expression-based transformations without needing to materialize every intermediate result as a column. **Turtle Island** builds on this principle, encouraging users to rely more on expressions ‚Äî flexible, composable, and context-aware ‚Äî rather than temporary columns.

Let‚Äôs walk through an example to clarify this approach.

### Problem: Column Manipulation Based on Row Index
```{python}
import turtle_island as ti
import polars as pl


df = pl.DataFrame(
    {
        "col1": [1, 2, 3, 4, 5],
        "col2": [6, 7, 8, 9, 10],
        "col3": [11, 12, 13, 14, 15],
    }
)
```

Say we have a DataFrame `df`, and we want to transform the values in `col1` and `col2` such that:

* If the row index is odd (1st, 3rd, ...), the values remain unchanged.
* If the row index is even (2nd, 4th, ...), the values should be taken from `col3`.


### Conventional Approach (Column-Oriented)
```{python}
mod2 = pl.col("index").mod(2).alias("mod")
col1_col2 = pl.col("col1", "col2")
otherwise = pl.col("col3")
branch_expr = pl.when(pl.col("mod").eq(0)).then(col1_col2).otherwise(otherwise)

(
    df
    .with_row_index()
    .with_columns(mod2)
    .select(branch_expr, otherwise)
)
```

Using only native Polars, achieving this typically requires multiple steps:

1. Add an `index` column using `pl.DataFrame.with_row_index()`.
2. Create a `mod` column (renamed from the `index` column) by computing `index % 2` within a `with_columns()` context.
3. Write conditional logic with `pl.when().then().otherwise()` based on the `mod` column, and place the result in a `select` context‚Äîalong with selecting the `col3` column.

#### Observations:

* You need at least three context operations.
* Polars contexts run in parallel and should be minimized when possible.
* This approach has column dependencies that require step-by-step materialization:
  * You can't write the conditional logic without first computing the `mod` column.
  * You can't compute the `mod` column without first creating the `index` column.

### Expression-Oriented Approach (Turtle Island Style)
With **Turtle Island**, you can express the same logic in a single `with_columns()` context, thanks to expression-based helpers:

```{python}
every_2_row = ti.is_every_nth_row(2)
col1_col2 = pl.col("col1", "col2")
caselist = [(every_2_row, col1_col2)]
otherwise = pl.col("col3")
branch_expr = ti.case_when(caselist=caselist, otherwise=otherwise)

df.with_columns(branch_expr)
```

#### Why This Works:

* `ti.is_every_nth_row()` returns a Polars expression, not a materialized column.
* It acts like a **virtual column**, usable directly in conditional logic.
* Since it's an expression, it doesn‚Äôt introduce column dependencies or require sequencing through multiple contexts.

Additionally, `ti.case_when()` provides a more ergonomic way to write complex conditional logic. It‚Äôs fully optional, but especially helpful when dealing with multiple conditional branches. Personally, I‚Äôve found it much cleaner and easier to maintain than chaining multiple `pl.when().then()` statements.