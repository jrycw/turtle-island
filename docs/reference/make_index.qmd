# make_index { #turtle_island.make_index }

```python
make_index(offset=0, *, name='index')
```

Returns a Polars expression that creates a virtual row index.

Borrowed from the [Polars documentation](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.with_row_index.html)
and adapted for expression-level use.

Unlike [pl.DataFrame.with_row_index()](https://docs.pola.rs/api/python/stable/reference/dataframe/api/polars.DataFrame.with_row_index.html), which works at the DataFrame level,
this expression can be composed inline and reused without materializing an actual column.

## Parameters {.doc-section .doc-section-parameters}

<code>[**offset**]{.parameter-name} [:]{.parameter-annotation-sep} [int]{.parameter-annotation} [ = ]{.parameter-default-sep} [0]{.parameter-default}</code>

:   Start the index at this offset. Cannot be negative.

<code>[**name**]{.parameter-name} [:]{.parameter-annotation-sep} [str]{.parameter-annotation} [ = ]{.parameter-default-sep} [\'index\']{.parameter-default}</code>

:   The name of the resulting column. Defaults to "index".

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A Polars expression that yields a sequential integer index starting from 0.

## Examples {.doc-section .doc-section-examples}

Adds a sequential index column to the DataFrame:
```{python}
import polars as pl
import turtle_island as ti

df = pl.DataFrame({"a": [1, 3, 5], "b": [2, 4, 6]})
df.select(ti.make_index(), pl.all())
```