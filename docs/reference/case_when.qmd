# case_when { #turtle_island.case_when }

```python
case_when(caselist, otherwise=None)
```

Simplifies conditional logic in Polars by chaining multiple `when‑then‑otherwise` expressions.

Inspired by [pd.Series.case_when()](https://pandas.pydata.org/docs/reference/api/pandas.Series.case_when.html), this function offers a more ergonomic way to express chained
conditional logic with Polars expressions.

::: {.callout-warning}
### Keyword shortcut is not supported
Passing multiple keyword arguments as equality conditions—such as `x=123` in
`pl.when()`—is not supported in this function.
:::

## Parameters {.doc-section .doc-section-parameters}

<code>[**caselist**]{.parameter-name} [:]{.parameter-annotation-sep} [Sequence\[tuple\[pl.Expr \| tuple\[pl.Expr\], pl.Expr\]\]]{.parameter-annotation}</code>

:   A sequence of tuples where each tuple represents a `when` and `then` branch. This function accepts three input forms (see examples below). Each tuple is evaluated in order from top to bottom. For each tuple, the expressions before the final element are treated as `when` conditions and combined with `&`. If the combined condition evaluates to `True`, the corresponding `then` expression (the last element) is returned and the evaluation stops. If no condition matches any tuple, the `otherwise` expression is used as the fallback.

<code>[**otherwise**]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   Fallback expression used when no conditions match.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A single Polars expression suitable for use in transformations.

## Examples {.doc-section .doc-section-examples}

The example below demonstrates all three supported input forms.

`expr1` uses the simplest form, where each tuple contains a single `when`
condition followed by its corresponding `then` expression.

`expr2` shows tuples with multiple `when` conditions listed before the final
`then` expression. These conditions are implicitly combined with `&`.

`expr3` uses a tuple as the first element of each tuple, containing multiple
`when` conditions which are also combined with `&` before evaluation.
```{python}
import polars as pl
import turtle_island as ti

df = pl.DataFrame({"x": [1, 2, 3, 4], "y": [5, 6, 7, 8]})

expr1 = ti.case_when(
    caselist=[
        (pl.col("x") < 2, pl.lit("small")),
        (pl.col("x") < 4, pl.lit("medium")),
    ],
    otherwise=pl.lit("large"),
).alias("size1")

expr2 = ti.case_when(
    caselist=[
        (pl.col("x") < 3, pl.col("y") < 6, pl.lit("small")),
        (pl.col("x") < 4, pl.col("y") < 8, pl.lit("medium")),
    ],
    otherwise=pl.lit("large"),
).alias("size2")

expr3 = ti.case_when(
    caselist=[
        ((pl.col("x") < 3, pl.col("y") < 6), pl.lit("small")),
        ((pl.col("x") < 4, pl.col("y") < 8), pl.lit("medium")),
    ],
    otherwise=pl.lit("large"),
).alias("size3")

df.with_columns(expr1, expr2, expr3)
```