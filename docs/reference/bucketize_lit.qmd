# bucketize_lit { #turtle_island.bucketize_lit }

```python
bucketize_lit(*items, return_dtype=None)
```

Returns a Polars expression that assigns a label to each row based on its index, cycling through the provided items in a round-robin fashion.

`bucketize_lit()` is a simplified version of
[bucketize()](bucketize.html#turtle_island.bucketize), designed for common
use cases involving literal values. For more advanced scenarios, consider using
`bucketize()` directly.

## Parameters {.doc-section .doc-section-parameters}

<code>[**items**]{.parameter-name} [:]{.parameter-annotation-sep} [Any]{.parameter-annotation} [ = ]{.parameter-default-sep} [()]{.parameter-default}</code>

:   Literal values to cycle through. All items must be of the same type, and at least two must be provided. See the table below for supported types and their conversions.

<code>[**return_dtype**]{.parameter-name} [:]{.parameter-annotation-sep} [pl.DataType \| pl.DataTypeExpr \| None]{.parameter-annotation} [ = ]{.parameter-default-sep} [None]{.parameter-default}</code>

:   An optional Polars data type to cast the resulting expression to.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A Polars expression that cycles through the provided values based on the row index modulo.

## Supported Type Conversions {.doc-section .doc-section-supported-type-conversions}

| Python Type          | Converted To       |
|----------------------|--------------------|
| `bool`               | `pl.Boolean`       |
| `datetime.datetime`  | `pl.Datetime`      |
| `datetime.date`      | `pl.Date`          |
| `datetime.time`      | `pl.Time`          |
| `datetime.timedelta` | `pl.Duration`      |
| `int`                | `pl.Int64`         |
| `float`              | `pl.Float64`       |
| `str`                | `pl.String`        |
| `list`, `tuple`      | `pl.List`          |
| Others               | no cast involved   |

## Examples {.doc-section .doc-section-examples}

Cycle through boolean values to mark alternating rows:
```{python}
import polars as pl
import turtle_island as ti

df = pl.DataFrame({"x": [1, 2, 3, 4, 5]})
df.with_columns(ti.bucketize_lit(True, False).alias("bucketized"))
```
Cast the result to a specific data type using `return_dtype=`:
```{python}
df.with_columns(
    ti.bucketize_lit(True, False, return_dtype=pl.Int64).alias("bucketized")
)
```