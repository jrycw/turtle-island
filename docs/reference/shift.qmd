# shift { #turtle_island.shift }

```python
shift(expr, offset=1, *, fill_expr)
```

A variant of [pl.Expr.shift()](https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.shift.html#polars.Expr.shift) that allows filling shifted values using another Polars expression.

::: {.callout-warning}
### Note: When `abs(offset)` exceeds the total number of rows

Since expressions are evaluated lazily at runtime, their validity cannot be
verified during construction. If `abs(offset)` equals or exceeds the total row count, the result
may behave like a full-column replacement using `fill_expr=`.
:::

## Parameters {.doc-section .doc-section-parameters}

<code>[**expr**]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A single Polars expression to shift.

<code>[**offset**]{.parameter-name} [:]{.parameter-annotation-sep} [int]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of rows to shift. It must be a non-zero integer. A positive value shifts the column downward (forward), while a negative value shifts it upward (backward). Defaults to 1.

<code>[**fill_expr**]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   Expression used to fill the shifted positions.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A Polars expression with shifted values and custom fill logic.

## Examples {.doc-section .doc-section-examples}

Shift values downward by 2:
```{python}
import polars as pl
import turtle_island as ti

df = pl.DataFrame({"x": [1, 2, 3, 4], "y": [5, 6, 7, 8]})
df.with_columns(
    ti.shift(pl.col("x"), 2, fill_expr=pl.col("y")).alias("shifted")
)
```
Shift values upward by 3:
```{python}
df.with_columns(
    ti.shift(pl.col("x"), -3, fill_expr=pl.col("y")).alias("shifted")
)
```