# cycle { #turtle_island.cycle }

```python
cycle(expr, offset=1)
```

Return a Polars expression that cycles the rows by a given offset.

::: {.callout-tip}
### Rechunk
Since `cycle()` uses [pl.Expr.append()](https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.append.html#polars-expr-append) internally,
you may consider rechunking its result using
[pl.Expr.rechunk()](https://docs.pola.rs/api/python/stable/reference/expressions/api/polars.Expr.rechunk.html#polars.Expr.rechunk)
for improved performance.
:::

## Parameters {.doc-section .doc-section-parameters}

<code>[**expr**]{.parameter-name} [:]{.parameter-annotation-sep} []{.parameter-annotation}</code>

:   A single Polars expression to apply the cycling operation on.

<code>[**offset**]{.parameter-name} [:]{.parameter-annotation-sep} [int]{.parameter-annotation} [ = ]{.parameter-default-sep} [1]{.parameter-default}</code>

:   The number of rows to cycle by. Positive values shift rows downward, and negative values shift rows upward. Defaults to 1.

## Returns {.doc-section .doc-section-returns}

<code>[]{.parameter-name} [:]{.parameter-annotation-sep} [pl.Expr]{.parameter-annotation}</code>

:   A Polars expression with values cyclically shifted.

## Examples {.doc-section .doc-section-examples}

Cycle downward by 2 rows:
```{python}
import polars as pl
import turtle_island as ti

df = pl.DataFrame({"x": [1, 2, 3, 4]})
df.with_columns(ti.cycle(pl.col("x"), 2).alias("cycle"))
```
Cycle upward by 4 rows (no visible change due to full cycle):
```{python}
df.with_columns(ti.cycle(pl.col("x"), -4).alias("cycle"))
```